// <auto-generated />
using System;
using System.Collections.Generic;
using Dualite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dualite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dualite.Models.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Permissions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("RateLimitPerMinute")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Dualite.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MonthlyQuota")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("QuotaResetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuotaUsed")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceTier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Dualite.Models.EmailExtraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, decimal>>("ConfidenceScores")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DetectedIntent")
                        .HasColumnType("text");

                    b.Property<int?>("EstimatedEffortMinutes")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, object>>("ExtractedEntities")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("SenderCompany")
                        .HasColumnType("text");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("text");

                    b.Property<string>("SenderName")
                        .HasColumnType("text");

                    b.Property<string>("SubjectLine")
                        .HasColumnType("text");

                    b.Property<decimal?>("UrgencyScore")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("EmailExtractions");
                });

            modelBuilder.Entity("Dualite.Models.InvoiceExtraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerKvk")
                        .HasColumnType("text");

                    b.Property<string>("BuyerName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("ExtractedFields")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("LineItems")
                        .HasColumnType("jsonb");

                    b.Property<string>("SellerIban")
                        .HasColumnType("text");

                    b.Property<string>("SellerKvk")
                        .HasColumnType("text");

                    b.Property<string>("SellerName")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("ValidationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VatRate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("InvoiceExtractions");
                });

            modelBuilder.Entity("Dualite.Models.ProcessingJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKeyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("InputHash")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("InputMetadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("OutputData")
                        .HasColumnType("jsonb");

                    b.Property<int?>("ProcessingTimeMs")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId");

                    b.HasIndex("ClientId");

                    b.ToTable("ProcessingJobs");
                });

            modelBuilder.Entity("Dualite.Models.ApiKey", b =>
                {
                    b.HasOne("Dualite.Models.Client", "Client")
                        .WithMany("ApiKeys")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Dualite.Models.EmailExtraction", b =>
                {
                    b.HasOne("Dualite.Models.ProcessingJob", "ProcessingJob")
                        .WithOne("EmailExtraction")
                        .HasForeignKey("Dualite.Models.EmailExtraction", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessingJob");
                });

            modelBuilder.Entity("Dualite.Models.InvoiceExtraction", b =>
                {
                    b.HasOne("Dualite.Models.ProcessingJob", "ProcessingJob")
                        .WithOne("InvoiceExtraction")
                        .HasForeignKey("Dualite.Models.InvoiceExtraction", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessingJob");
                });

            modelBuilder.Entity("Dualite.Models.ProcessingJob", b =>
                {
                    b.HasOne("Dualite.Models.ApiKey", "ApiKey")
                        .WithMany("ProcessingJobs")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dualite.Models.Client", "Client")
                        .WithMany("ProcessingJobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Dualite.Models.ApiKey", b =>
                {
                    b.Navigation("ProcessingJobs");
                });

            modelBuilder.Entity("Dualite.Models.Client", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("ProcessingJobs");
                });

            modelBuilder.Entity("Dualite.Models.ProcessingJob", b =>
                {
                    b.Navigation("EmailExtraction");

                    b.Navigation("InvoiceExtraction");
                });
#pragma warning restore 612, 618
        }
    }
}
